{"version":3,"sources":["../src/createTask.js"],"names":["createTask","options","name","payload","Promise","resolve","reject","tasksPath","queuePath","ref","firebase","database","auth","currentUser","getToken","then","_token","taskKey","push","Object","assign","_state","specPrefix","sendTaskExecutionDetails","_execution","id","context","execution","functionIndex","functionDetails","taskRef","key","on","data","val","off","_error_details","FirebaseProviderError"],"mappings":";;;;;kBAGwBA,U;;AAHxB;;;;AACA;;;;AAEe,SAASA,UAAT,CAAoBC,OAApB,EAA6B;AAC1C,SAAO,UAASC,IAAT,EAA6B;AAAA;;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAClC,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,UAAMC,YAAYN,QAAQO,SAAR,GACdP,QAAQO,SAAR,GAAoB,QADN,GAEd,aAFJ;AAGA,UAAMC,MAAMC,mBAASC,QAAT,GAAoBF,GAApB,CAAwBF,SAAxB,CAAZ;;AAEA,aAAOG,mBACJE,IADI,GAEJC,WAFI,CAEQC,QAFR,GAGJC,IAHI,CAGC,UAACC,MAAD,EAAY;AAChB,YAAMC,UAAUR,IAAIS,IAAJ,CACdC,OAAOC,MAAP,CACE;AACEC,kBAAQpB,QAAQqB,UAAR,GACDrB,QAAQqB,UADP,SACqBpB,IADrB,GAEJA,IAHN;AAIEc;AAJF,SADF,EAOEf,QAAQsB,wBAAR,GACI;AACEC,sBAAY;AACVC,gBAAI,MAAKC,OAAL,CAAaC,SAAb,CAAuBF,EADjB;AAEVG,2BAAe,MAAKC,eAAL,CAAqBD;AAF1B;AADd,SADJ,GAOI,EAdN,EAeEzB,OAfF,CADc,CAAhB;;AAoBA,YAAM2B,UAAUpB,mBAASC,QAAT,GAAoBF,GAApB,CAA2BF,SAA3B,SAAwCU,QAAQc,GAAhD,CAAhB;AACAD,gBAAQE,EAAR,CAAW,OAAX,EAAoB,UAACC,IAAD,EAAU;AAC5B,cAAMC,MAAMD,KAAKC,GAAL,EAAZ;;AAEA,cAAI,CAACA,GAAL,EAAU;AACRJ,oBAAQK,GAAR;AACA9B;AACD,WAHD,MAGO,IAAI6B,IAAIE,cAAR,EAAwB;AAC7BN,oBAAQK,GAAR;AACA7B,mBAAO,IAAI+B,6BAAJ,CAA0BH,IAAIE,cAA9B,CAAP;AACD;AACF,SAVD;AAWD,OApCI,CAAP;AAqCD,KA3CM,CAAP;AA4CD,GA7CD;AA8CD","file":"createTask.js","sourcesContent":["import firebase from 'firebase'\nimport { FirebaseProviderError } from './errors'\n\nexport default function createTask(options) {\n  return function(name, payload = {}) {\n    return new Promise((resolve, reject) => {\n      const tasksPath = options.queuePath\n        ? options.queuePath + '/tasks'\n        : 'queue/tasks'\n      const ref = firebase.database().ref(tasksPath)\n\n      return firebase\n        .auth()\n        .currentUser.getToken()\n        .then((_token) => {\n          const taskKey = ref.push(\n            Object.assign(\n              {\n                _state: options.specPrefix\n                  ? `${options.specPrefix}_${name}`\n                  : name,\n                _token,\n              },\n              options.sendTaskExecutionDetails\n                ? {\n                    _execution: {\n                      id: this.context.execution.id,\n                      functionIndex: this.functionDetails.functionIndex,\n                    },\n                  }\n                : {},\n              payload\n            )\n          )\n\n          const taskRef = firebase.database().ref(`${tasksPath}/${taskKey.key}`)\n          taskRef.on('value', (data) => {\n            const val = data.val()\n\n            if (!val) {\n              taskRef.off()\n              resolve()\n            } else if (val._error_details) {\n              taskRef.off()\n              reject(new FirebaseProviderError(val._error_details))\n            }\n          })\n        })\n    })\n  }\n}\n"]}