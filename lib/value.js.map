{"version":3,"sources":["../src/value.js"],"names":["value","path","options","ref","once","then","snapshot","asArray","key","val","catch","error","FirebaseProviderError"],"mappings":";;;;;kBAGwBA,K;;AAHxB;;AACA;;AAEe,SAASA,KAAT,CAAeC,IAAf,EAAmC;AAAA,MAAdC,OAAc,uEAAJ,EAAI;;AAChD,MAAMC,MAAM,wBAAUF,IAAV,EAAgBC,OAAhB,CAAZ;;AAEA,SAAOC,IACJC,IADI,CACC,OADD,EAEJC,IAFI,CAEC,UAACC,QAAD,EAAc;AAClB,QAAIJ,QAAQK,OAAR,IAAmB,aAAaD,QAApC,EAA8C;AAC5C,aAAO;AACLE,aAAKF,SAASE,GADT;AAELR,eAAO,8BAAgBM,QAAhB;AAFF,OAAP;AAID;;AAED,WAAO;AACLE,WAAKF,SAASE,GADT;AAELR,aAAOM,SAASG,GAAT;AAFF,KAAP;AAID,GAdI,EAeJC,KAfI,CAeE,UAACC,KAAD,EAAW;AAChB,UAAM,IAAIC,6BAAJ,CAA0BD,KAA1B,CAAN;AACD,GAjBI,CAAP;AAkBD","file":"value.js","sourcesContent":["import { createRef, snapshotToArray } from './helpers'\nimport { FirebaseProviderError } from './errors'\n\nexport default function value(path, options = {}) {\n  const ref = createRef(path, options)\n\n  return ref\n    .once('value')\n    .then((snapshot) => {\n      if (options.asArray && 'forEach' in snapshot) {\n        return {\n          key: snapshot.key,\n          value: snapshotToArray(snapshot),\n        }\n      }\n\n      return {\n        key: snapshot.key,\n        value: snapshot.val(),\n      }\n    })\n    .catch((error) => {\n      throw new FirebaseProviderError(error)\n    })\n}\n"]}