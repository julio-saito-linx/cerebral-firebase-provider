{"version":3,"sources":["../../src/operators/put.js"],"names":["putFactory","putPath","file","options","put","firebase","props","state","path","resolve","evaluatedOptions","Object","keys","reduce","currentEvaluatedOptions","key","option","isTag","Error","type","progress","value","assign","set"],"mappings":";;;;;;AAAA;;AAEA,SAASA,UAAT,CAAoBC,OAApB,EAA6BC,IAA7B,EAAiD;AAAA,MAAdC,OAAc,uEAAJ,EAAI;;AAC/C,WAASC,GAAT,OAAwD;AAAA,QAAzCC,QAAyC,QAAzCA,QAAyC;AAAA,QAA/BC,KAA+B,QAA/BA,KAA+B;AAAA,QAAxBC,KAAwB,QAAxBA,KAAwB;AAAA,QAAjBC,IAAiB,QAAjBA,IAAiB;AAAA,QAAXC,OAAW,QAAXA,OAAW;;AACtD,QAAMC,mBAAmBC,OAAOC,IAAP,CAAYT,OAAZ,EAAqBU,MAArB,CACvB,UAACC,uBAAD,EAA0BC,GAA1B,EAAkC;AAChC,UAAMC,SAASb,QAAQY,GAAR,CAAf;;AAEA,UAAIA,QAAQ,UAAZ,EAAwB;AACtB,YAAI,CAACN,QAAQQ,KAAR,CAAcD,MAAd,EAAsB,OAAtB,EAA+B,QAA/B,CAAL,EAA+C;AAC7C,gBAAM,IAAIE,KAAJ,CACJ,+FADI,CAAN;AAGD;;AAED,YAAIF,OAAOG,IAAP,KAAgB,QAApB,EAA8B;AAC5BL,kCAAwBC,GAAxB,IAA+B,UAACK,QAAD,EAAc;AAC3C;AACAX,oBAAQY,KAAR,CAAcL,MAAd,EAAsBL,OAAOW,MAAP,CAAc,EAAd,EAAkBhB,KAAlB,EAAyBc,QAAzB,CAAtB;AACD,WAHD;AAID,SALD,MAKO;AACLN,kCAAwBC,GAAxB,IAA+B,UAACK,QAAD,EAAc;AAC3Cb,kBAAMgB,GAAN,CAAUd,QAAQD,IAAR,CAAaQ,MAAb,CAAV,EAAgCI,SAASA,QAAzC;AACD,WAFD;AAGD;AACF,OAjBD,MAiBO;AACLN,gCAAwBC,GAAxB,IAA+BN,QAAQY,KAAR,CAAcL,MAAd,CAA/B;AACD;;AAED,aAAOF,uBAAP;AACD,KA1BsB,EA2BvB,EA3BuB,CAAzB;;AA8BA,WAAO,kCACLT,SAASD,GAAT,CACEK,QAAQY,KAAR,CAAcpB,OAAd,CADF,EAEEQ,QAAQY,KAAR,CAAcnB,IAAd,CAFF,EAGEQ,gBAHF,CADK,EAMLF,IANK,CAAP;AAQD;;AAED,SAAOJ,GAAP;AACD;;kBAEcJ,U","file":"put.js","sourcesContent":["import { createReturnPromise } from '../helpers'\n\nfunction putFactory(putPath, file, options = {}) {\n  function put({ firebase, props, state, path, resolve }) {\n    const evaluatedOptions = Object.keys(options).reduce(\n      (currentEvaluatedOptions, key) => {\n        const option = options[key]\n\n        if (key === 'progress') {\n          if (!resolve.isTag(option, 'state', 'signal')) {\n            throw new Error(\n              \"@cerebral/firebase: The value for 'progress' option should be either 'state' or 'signal' tag.\"\n            )\n          }\n\n          if (option.type === 'signal') {\n            currentEvaluatedOptions[key] = (progress) => {\n              // We call progress signal with same 'props' context\n              resolve.value(option)(Object.assign({}, props, progress))\n            }\n          } else {\n            currentEvaluatedOptions[key] = (progress) => {\n              state.set(resolve.path(option), progress.progress)\n            }\n          }\n        } else {\n          currentEvaluatedOptions[key] = resolve.value(option)\n        }\n\n        return currentEvaluatedOptions\n      },\n      {}\n    )\n\n    return createReturnPromise(\n      firebase.put(\n        resolve.value(putPath),\n        resolve.value(file),\n        evaluatedOptions\n      ),\n      path\n    )\n  }\n\n  return put\n}\n\nexport default putFactory\n"]}