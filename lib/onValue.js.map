{"version":3,"sources":["../src/onValue.js"],"names":["createOnValue","path","signal","options","hasEmittedInitialValue","data","context","controller","getSignal","Object","assign","value","val","payload"],"mappings":";;;;;kBAEwBA,a;;AAFxB;;AAEe,SAASA,aAAT,CAAuBC,IAAvB,EAA6BC,MAA7B,EAAmD;AAAA;;AAAA,MAAdC,OAAc,uEAAJ,EAAI;;AAChE,MAAIC,yBAAyB,KAA7B;AACA,yBAAS,wBAAUH,IAAV,EAAgBE,OAAhB,CAAT,EAAmCF,IAAnC,EAAyC,OAAzC,EAAkDC,MAAlD,EAA0D,UAACG,IAAD,EAAU;AAClE,QAAI,CAACD,sBAAL,EAA6B;AAC3BA,+BAAyB,IAAzB;AACA;AACD;;AAED,UAAKE,OAAL,CAAaC,UAAb,CAAwBC,SAAxB,CAAkCN,MAAlC,EACEO,OAAOC,MAAP,CAAc,EAAEC,OAAON,KAAKO,GAAL,EAAT,EAAd,EAAqCT,QAAQU,OAAR,IAAmB,EAAxD,CADF;AAGD,GATD;AAUD","file":"onValue.js","sourcesContent":["import { listenTo, createRef } from './helpers'\n\nexport default function createOnValue(path, signal, options = {}) {\n  let hasEmittedInitialValue = false\n  listenTo(createRef(path, options), path, 'value', signal, (data) => {\n    if (!hasEmittedInitialValue) {\n      hasEmittedInitialValue = true\n      return\n    }\n\n    this.context.controller.getSignal(signal)(\n      Object.assign({ value: data.val() }, options.payload || {})\n    )\n  })\n}\n"]}