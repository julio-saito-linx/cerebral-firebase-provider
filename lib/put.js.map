{"version":3,"sources":["../src/put.js"],"names":["put","path","file","options","filename","name","ref","child","metadata","Object","assign","contentType","type","uploadTask","progress","Promise","resolve","reject","on","snapshot","payload","bytesTransferred","totalBytes","state","error","FirebaseProviderError","url","downloadURL"],"mappings":";;;;;kBAOwBA,G;;AAPxB;;AACA;;AAEA;;;;AAIe,SAASA,GAAT,CAAaC,IAAb,EAAmBC,IAAnB,EAAuC;AAAA,MAAdC,OAAc,uEAAJ,EAAI;;AACpD,MAAMC,WAAWD,QAAQC,QAAR,IAAoBF,KAAKG,IAA1C;AACA,MAAMC,MAAM,+BAAiBL,IAAjB,EAAuBM,KAAvB,CAA6BH,QAA7B,CAAZ;AACA,MAAMI,WAAWC,OAAOC,MAAP,CAAc,EAAd,EAAkBP,QAAQK,QAAR,IAAoB,EAAtC,EAA0C;AACzDG,iBAAaT,KAAKU;AADuC,GAA1C,CAAjB;AAGA,MAAMC,aAAaP,IAAIN,GAAJ,CAAQE,IAAR,EAAcM,QAAd,CAAnB;AACA,MAAMM,WAAWX,QAAQW,QAAR,IAAqB,YAAM,CAAE,CAA9C;AACA,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCJ,eAAWK,EAAX,CACE,eADF,EAEE,UAACC,QAAD,EAAc;AACZL,eACEL,OAAOC,MAAP,CAAc,EAAd,EAAkBP,QAAQiB,OAAR,IAAmB,EAArC,EAAyC;AACvCN,kBAAUK,SAASE,gBAAT,GAA4BF,SAASG,UADR;AAEvCD,0BAAkBF,SAASE,gBAFY;AAGvCC,oBAAYH,SAASG,UAHkB;AAIvCC,eAAOJ,SAASI,KAJuB,CAIhB;AAJgB,OAAzC,CADF;AAQD,KAXH,EAYE,UAACC,KAAD,EAAW;AACTP,aAAO,IAAIQ,6BAAJ,CAA0BD,KAA1B,CAAP;AACD,KAdH,EAeE,YAAM;AACJR,cAAQ,EAAEU,KAAKb,WAAWM,QAAX,CAAoBQ,WAA3B,EAAwCvB,kBAAxC,EAAR;AACD,KAjBH;AAmBD,GApBM,CAAP;AAqBD","file":"put.js","sourcesContent":["import { createStorageRef } from './helpers'\nimport { FirebaseProviderError } from './errors'\n\n/* options.progress expects a function which will receive\n * details on the upload: { progress, bytesTransferred, totalBytes, state }\n * progress is a %, state can be 'paused' or 'running'\n */\nexport default function put(path, file, options = {}) {\n  const filename = options.filename || file.name\n  const ref = createStorageRef(path).child(filename)\n  const metadata = Object.assign({}, options.metadata || {}, {\n    contentType: file.type,\n  })\n  const uploadTask = ref.put(file, metadata)\n  const progress = options.progress || (() => {})\n  return new Promise((resolve, reject) => {\n    uploadTask.on(\n      'state_changed',\n      (snapshot) => {\n        progress(\n          Object.assign({}, options.payload || {}, {\n            progress: snapshot.bytesTransferred / snapshot.totalBytes,\n            bytesTransferred: snapshot.bytesTransferred,\n            totalBytes: snapshot.totalBytes,\n            state: snapshot.state, // 'paused', 'running'\n          })\n        )\n      },\n      (error) => {\n        reject(new FirebaseProviderError(error))\n      },\n      () => {\n        resolve({ url: uploadTask.snapshot.downloadURL, filename })\n      }\n    )\n  })\n}\n"]}